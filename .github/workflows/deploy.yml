name: CI/CD Deploy

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Backend Tests
        run: |
          cd backend
          chmod +x ./mvnw
          ./mvnw test

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Build Backend
        run: |
          cd backend
          chmod +x ./mvnw
          ./mvnw clean package -DskipTests

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          echo "Branch detected: ${{ github.ref }}"

          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            DEPLOY_DIR="/home/${{ secrets.SERVER_USER }}/deploy/dev"
            COMPOSE_FILE="docker-compose.dev.yml"
            echo "Deploying to DEVELOPMENT environment"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            DEPLOY_DIR="/home/${{ secrets.SERVER_USER }}/deploy/prod"
            COMPOSE_FILE="docker-compose.prod.yml"
            echo "Deploying to PRODUCTION environment"
          else
            echo "Unsupported branch"
            exit 1
          fi

          echo "Deploying to $DEPLOY_DIR using $COMPOSE_FILE..."

          # Deploy to server
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            
            echo "Navigating to deployment directory: $DEPLOY_DIR"
            cd $DEPLOY_DIR
            
            echo "Pulling latest changes..."
            git pull origin $(basename $DEPLOY_DIR)
            
            echo "Giving execute permissions to deploy script..."
            chmod +x deploy-server.sh
            
            echo "Running deployment script..."
            ./deploy-server.sh
            
            echo "Deployment completed successfully!"
          EOF

      - name: Health Check
        run: |
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            HEALTH_URL="http://${{ secrets.SERVER_HOST }}:8080/api/health"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            HEALTH_URL="http://${{ secrets.SERVER_HOST }}:8080/api/health"
          fi
          
          echo "Performing health check on: $HEALTH_URL"
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f $HEALTH_URL > /dev/null 2>&1; then
              echo "Health check passed!"
              break
            fi
            echo "Health check attempt $i/30 failed, retrying in 10 seconds..."
            sleep 10
          done
          
          if [ $i -eq 30 ]; then
            echo "Health check failed after 30 attempts"
            exit 1
          fi