# ========================================
# DIAGN√ìSTICO DEL SERVIDOR UBUNTU
# ========================================
# Script para diagnosticar problemas de conectividad en el servidor

Write-Host "üîç DIAGN√ìSTICO DEL SERVIDOR UBUNTU" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan

# Configuraci√≥n del servidor
$SERVER_IP = "72.167.52.14"
$BACKEND_PORT = "8080"
$FRONTEND_PORT = "5173"

Write-Host "üìã CONFIGURACI√ìN ACTUAL:" -ForegroundColor Yellow
Write-Host "   Servidor IP: $SERVER_IP" -ForegroundColor White
Write-Host "   Backend Puerto: $BACKEND_PORT" -ForegroundColor White
Write-Host "   Frontend Puerto: $FRONTEND_PORT" -ForegroundColor White
Write-Host ""

# 1. Verificar conectividad b√°sica
Write-Host "üåê VERIFICANDO CONECTIVIDAD B√ÅSICA..." -ForegroundColor Green
try {
    $ping = Test-Connection -ComputerName $SERVER_IP -Count 1 -Quiet
    if ($ping) {
        Write-Host "   ‚úÖ Ping exitoso a $SERVER_IP" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Ping fall√≥ a $SERVER_IP" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Error en ping: $($_.Exception.Message)" -ForegroundColor Red
}

# 2. Verificar puertos abiertos
Write-Host ""
Write-Host "üîå VERIFICANDO PUERTOS ABIERTOS..." -ForegroundColor Green

# Backend
try {
    $backendTest = Test-NetConnection -ComputerName $SERVER_IP -Port $BACKEND_PORT -InformationLevel Quiet
    if ($backendTest.TcpTestSucceeded) {
        Write-Host "   ‚úÖ Puerto $BACKEND_PORT (Backend) est√° abierto" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Puerto $BACKEND_PORT (Backend) est√° cerrado" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Error verificando puerto $BACKEND_PORT : $($_.Exception.Message)" -ForegroundColor Red
}

# Frontend
try {
    $frontendTest = Test-NetConnection -ComputerName $SERVER_IP -Port $FRONTEND_PORT -InformationLevel Quiet
    if ($frontendTest.TcpTestSucceeded) {
        Write-Host "   ‚úÖ Puerto $FRONTEND_PORT (Frontend) est√° abierto" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Puerto $FRONTEND_PORT (Frontend) est√° cerrado" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Error verificando puerto $FRONTEND_PORT : $($_.Exception.Message)" -ForegroundColor Red
}

# 3. Verificar URLs de la API
Write-Host ""
Write-Host "üîó VERIFICANDO URLs DE LA API..." -ForegroundColor Green

$backendURL = "http://$SERVER_IP`:$BACKEND_PORT"
$frontendURL = "http://$SERVER_IP`:$FRONTEND_PORT"

Write-Host "   Backend URL: $backendURL" -ForegroundColor White
Write-Host "   Frontend URL: $frontendURL" -ForegroundColor White

# 4. Verificar archivos de configuraci√≥n
Write-Host ""
Write-Host "üìÅ VERIFICANDO ARCHIVOS DE CONFIGURACI√ìN..." -ForegroundColor Green

$configFiles = @(
    ".env.dev.local",
    "docker-compose.dev.yml",
    "frontend/src/config/dev.ts"
)

foreach ($file in $configFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file existe" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file no existe" -ForegroundColor Red
    }
}

# 5. Verificar Docker
Write-Host ""
Write-Host "üê≥ VERIFICANDO DOCKER..." -ForegroundColor Green

try {
    $dockerVersion = docker --version
    if ($dockerVersion) {
        Write-Host "   ‚úÖ Docker est√° instalado: $dockerVersion" -ForegroundColor Green
    }
} catch {
    Write-Host "   ‚ùå Docker no est√° instalado o no es accesible" -ForegroundColor Red
}

try {
    $dockerComposeVersion = docker-compose --version
    if ($dockerComposeVersion) {
        Write-Host "   ‚úÖ Docker Compose est√° instalado: $dockerComposeVersion" -ForegroundColor Green
    }
} catch {
    Write-Host "   ‚ùå Docker Compose no est√° instalado o no es accesible" -ForegroundColor Red
}

# 6. Recomendaciones
Write-Host ""
Write-Host "üí° RECOMENDACIONES:" -ForegroundColor Cyan
Write-Host "   1. Verificar que los servicios Docker est√©n corriendo en el servidor" -ForegroundColor White
Write-Host "   2. Verificar la configuraci√≥n de CORS en el backend" -ForegroundColor White
Write-Host "   3. Verificar que los puertos est√©n abiertos en el firewall del servidor" -ForegroundColor White
Write-Host "   4. Verificar que las variables de entorno est√©n configuradas correctamente" -ForegroundColor White
Write-Host ""

Write-Host "üéØ SIGUIENTE PASO:" -ForegroundColor Yellow
Write-Host "   Ejecutar: .\deploy-dev-server.ps1" -ForegroundColor White
Write-Host "   O ejecutar: .\scripts\clean-dev.ps1 seguido de docker-compose -f docker-compose.dev.yml up -d" -ForegroundColor White
